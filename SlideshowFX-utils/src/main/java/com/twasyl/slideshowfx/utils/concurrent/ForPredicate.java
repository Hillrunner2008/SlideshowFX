/*
 * Copyright 2016 Thierry Wasylczenko
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.twasyl.slideshowfx.utils.concurrent;

import javafx.concurrent.Task;

import java.util.ArrayList;
import java.util.List;

/**
 * This class is used in the {@link com.twasyl.slideshowfx.utils.concurrent.TaskAction#forTask(javafx.concurrent.Task)}
 * method. It identifies for which Task an action should be triggered when a {@link com.twasyl.slideshowfx.utils.concurrent.WhenPredicate}
 * is defined.
 *
 * @author Thierry Wasylczenko
 * @version 1.0.0
 * @since SlideshowFX 1.0.0
 */
public class ForPredicate {

    /**
     * The list of all WhenPredicate generated by the {@link #when()} method.
     */
    protected final List<WhenPredicate> when = new ArrayList<>();

    /**
     * The task associated to this predicate.
     */
    protected Task task;

    protected ForPredicate(final Task task) {
        this.task = task;
    }

    /**
     * Creates a {@link com.twasyl.slideshowfx.utils.concurrent.WhenPredicate} for the given task.
     * @return a well created {@link com.twasyl.slideshowfx.utils.concurrent.WhenPredicate}.
     */
    public WhenPredicate when() {
        final WhenPredicate whenPredicate = new WhenPredicate(this);
        this.when.add(whenPredicate);

        return whenPredicate;
    }
}
