/*
 * Copyright 2014 Thierry Wasylczenko
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.3'
    }
}

apply plugin: 'org.asciidoctor.gradle.asciidoctor'

ext {
	allLibs = new File(rootDir, '/lib')
    asciidoctorj = fileTree(dir: allLibs, include: 'asciidoctorj/*.jar')
	felix = fileTree(dir: allLibs, include: 'Felix/*.jar')
    hamcrest = fileTree(dir: allLibs, include: 'hamcrest-core-1.3.jar')
	jsoup = fileTree(dir: allLibs, include: 'jsoup-1.7.3.jar')
	junit = fileTree(dir: allLibs, include: 'junit-4.11.jar')
	leapmotion = fileTree(dir: allLibs, include: 'Leap/*')
	markdown = fileTree(dir: allLibs, include: 'markdown/*.jar')
	scribe = fileTree(dir: allLibs, include: 'Scribe/*.jar')
	textile = fileTree(dir: allLibs, include: 'WikiText/*.jar')
	velocity = fileTree(dir: allLibs, include: 'Velocity/*.jar')
	vertx = fileTree(dir: allLibs, include: 'Vert.x/*.jar')		
	zxing = fileTree(dir: allLibs, include: 'ZXing/*.jar')

	jdk = System.env.'JAVA_HOME'
}

asciidoctor {
    outputDir = new File("$buildDir/docs/asciidoctor")
    options = [
            attributes: [
                    'source-highlighter': 'coderay',
                    toc: '',
                    'javafx-version': 8,
                    'jdk-version': 8,
                    'gradle-version': 2.0
            ]
    ]
}

def getBuildNumber() {
	ext.gitCommitIdCmd = "git --work-tree=\"${rootDir.absolutePath}\" --git-dir=\"${rootDir.absolutePath}${File.separator}.git\" rev-parse --short HEAD"
    ext.gitCommitId = ext.gitCommitIdCmd.execute().text.trim()

    ext.isRepoDirtyCmd = "git --work-tree=\"${rootDir.absolutePath}\" --git-dir=\"${rootDir.absolutePath}${File.separator}.git\" status 2"
    ext.isRepoDirty = !ext.isRepoDirtyCmd.execute().text.trim().contains("nothing to commit, working directory clean");

    ext.appVersion = "${ext.gitCommitId}${ext.isRepoDirty ? '-unofficial' : ''}";

    return ext.appVersion
}

subprojects {
	apply plugin: 'java'
	sourceCompatibility = 1.8
	targetCompatibility= 1.8
}

project(':SlideshowFX-html') {
	dependencies {
		compile project(':SlideshowFX-markup')
		compile felix
	}

	jar {
		manifest {
			attributes('Manifest-Version': '1.0',
					   'Bundle-Name': 'SlideshowFX HTML support',
					   'Bundle-Description':'Support HTML for defining slide\'s content',
					   'Bundle-Version': '1.0.0',
					   'Bundle-Activator': 'com.twasyl.slideshowfx.markup.html.activator.HtmlActivator',
					   'Bundle-Vendor': 'Thierry Wasylczenko',
					   'Export-Package': 'com.twasyl.slideshowfx.markup',
					   'Import-Package': 'org.osgi.framework')
		}
	}
}

project(':SlideshowFX-markdown') {
	
	dependencies {
		compile project(':SlideshowFX-markup')
		compile felix
		compile markdown
	}

	jar {
		from( markdown.files ) {
      		include '*'
   		}

		manifest {
			attributes('Manifest-Version': '1.0',
					   'Bundle-Name': 'SlideshowFX markdown support',
					   'Bundle-Description': 'Support markdown for defining slide\'s content',
					   'Bundle-Version': '1.0.0',
					   'Bundle-Activator': 'com.twasyl.slideshowfx.markup.markdown.activator.MarkdownActivator',
					   'Bundle-ClassPath': 'txtmark-0.11.jar,.',
					   'Bundle-Vendor': 'Thierry Wasylczenko',
					   'Export-Package': 'com.twasyl.slideshowfx.markup',
					   'Import-Package': 'org.osgi.framework')
		}
	}	
}

project(':SlideshowFX-textile') {
	
	dependencies {
		compile project(':SlideshowFX-markup')
		compile felix
		compile textile

        testCompile junit
	}	

	jar {
		from( textile.files ) {
      		include '*'
   		}

		manifest {
			attributes('Manifest-Version': '1.0',
					   'Bundle-Name': 'SlideshowFX Textile support',
					   'Bundle-Description': 'Support Textile for defining slide\'s content',
					   'Bundle-Version': '1.0.0',
					   'Bundle-Activator': 'com.twasyl.slideshowfx.markup.textile.activator.TextileActivator',
					   'Bundle-ClassPath': 'org.eclipse.mylyn.wikitext.core_2.0.0.20140108-1934.jar,org.eclipse.mylyn.wikitext.textile.core_2.0.0.20131212-0025.jar,.',
					   'Bundle-Vendor': 'Thierry Wasylczenko',
					   'Export-Package': 'com.twasyl.slideshowfx.markup',
					   'Import-Package': 'org.osgi.framework')
		}
	}
}

project(':SlideshowFX-asciidoctor') {

    dependencies {
        compile project(':SlideshowFX-markup')
        compile felix
        compile asciidoctorj

        testCompile junit
        testCompile hamcrest
    }

    jar {
        from( asciidoctorj.files ) {
            include '*'
        }

        manifest {
            attributes('Manifest-Version': '1.0',
                    'Bundle-Name': 'SlideshowFX asciidoctor support',
                    'Bundle-Description': 'Support asscidoctor for defining slide\'s content',
                    'Bundle-Version': '1.0.0',
                    'Bundle-Activator': 'com.twasyl.slideshowfx.markup.asciidoctor.activator.AsciidoctorActivator',
                    'Bundle-ClassPath': 'slf4j-api-1.7.7.jar,slf4j-simple-1.7.7.jar,jruby-complete-1.7.13.jar,asciidoctorj-1.5.0.preview.7.jar,.',
                    'Bundle-Vendor': 'Thierry Wasylczenko',
                    'Export-Package': 'com.twasyl.slideshowfx.markup',
                    'Import-Package': 'org.osgi.framework')
        }
    }
}

project(':SlideshowFX-app') {
    apply plugin: 'application'

    ant.importBuild "${project.projectDir.absolutePath}/src/main/resources/javafx.xml"

    ant.classpath = "${jdk}/lib/ant-javafx.jar"
    ant.mainClassName = 'com.twasyl.slideshowfx.app.SlideshowFX'
    ant.fallbackClassName = 'com.javafx.main.NoJavaFXFallback'

    ant.distDir = "${project.buildDir.absolutePath}${File.separator}${libsDir.name}"
    ant.distName = "${project.archivesBaseName}"
    ant.resourceDir = libsDir

    ant.resourceExcludePattern = archivesBaseName + ".jar"

    ant.applicationTitle = "SlideshowFX"
    ant.applicationVendor = "Thierry Wasylczenko"
    ant.applicationVersion = "${getBuildNumber()}"

    ant.applicationClasses = "${project.buildDir.absolutePath}/classes/main/"
    ant.applicationClassesIncludes = "**/com/"
    ant.applicationResources = "${project.buildDir.absolutePath}/resources/main/"
    ant.applicationResourcesIncludes = "**/com/"

    ant.deployOutDir = "${project.buildDir.absolutePath}${File.separator}packaging"
    ant.deployResourcesDir = "${project.buildDir.absolutePath}${File.separator}${libsDir.name}"

	task jar(overwrite: true) << {

        if (jdk != null && !jdk.isEmpty()) {

        	if(!libsDir.exists()) libsDir.mkdirs()

        	// Copying libs
            copy {
            	from(new File(project(':SlideshowFX-markup').libsDir, project(':SlideshowFX-markup').archivesBaseName + ".jar"))
				from(felix.files)
				from(jsoup.files)
				from(leapmotion.files)
				from(scribe.files)
				from(velocity.files)
				from(vertx.files)
				from(zxing.files)

            	into(libsDir)
            }

        	def classpath = ""
        	
        	fileTree(dir: libsDir, include: '*.jar', exclude: archivesBaseName + ".jar").each {
        		f ->
        		classpath += f.name + ","
        	}

        	classpath += "."

            ant.resourceIncludePattern = classpath
            javafxjar.execute()
        }
    }

    task buildJavaFXBundle << {

        if (jdk != null && !jdk.isEmpty()) {
            javafxdeploy.execute()
        }
    }

	dependencies {
		compile project(':SlideshowFX-markup')
		compile felix
		compile jsoup
		compile leapmotion
		compile scribe
		compile velocity
		compile vertx
		compile zxing

        testCompile hamcrest
		testCompile  junit
	}	

	tasks['jar'].dependsOn 'classes'
	tasks['jar'].dependsOn ':SlideshowFX-markup:jar'
	tasks['buildJavaFXBundle'].dependsOn 'jar'
	tasks['assemble'].dependsOn 'buildJavaFXBundle'
}

task installMarkupPlugins << {

    def markupProject = project(':SlideshowFX-html')
    def htmlMarkupFile = new File(markupProject.libsDir, markupProject.archivesBaseName + ".jar")
    if(!htmlMarkupFile.exists()) throw new GradleException("The HTML markup JAR does not exist")

    markupProject = project(':SlideshowFX-markdown')
    def markdownMarkupFile = new File(markupProject.libsDir, markupProject.archivesBaseName + ".jar")
    if(!markdownMarkupFile.exists()) throw new GradleException("The markdown markup JAR does not exist")

    markupProject = project(':SlideshowFX-textile')
    def textileMarkupFile = new File(markupProject.libsDir, markupProject.archivesBaseName + ".jar")
    if(!textileMarkupFile.exists()) throw new GradleException("The textile markup JAR does not exist")

    markupProject = project(':SlideshowFX-asciidoctor')
    def asciidoctoreMarkupFile = new File(markupProject.libsDir, markupProject.archivesBaseName + ".jar")
    if(!asciidoctoreMarkupFile.exists()) throw new GradleException("The asciidoctor markup JAR does not exist")

	def pluginsFolder = new File(System.getProperty("user.home"), '.SlideshowFX/plugins')
	if(!pluginsFolder.exists()) pluginsFolder.mkdirs()

    println "The following files will be copied to ${pluginsFolder.absolutePath}"
    println "- ${htmlMarkupFile.absolutePath}"
    println "- ${markdownMarkupFile.absolutePath}"
    println "- ${textileMarkupFile.absolutePath}"
    println "- ${asciidoctoreMarkupFile.absolutePath}"

	copy {
		from htmlMarkupFile
		from markdownMarkupFile
		from textileMarkupFile
        from asciidoctoreMarkupFile

		into pluginsFolder
	}
}

task buildGradleWrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

installMarkupPlugins.dependsOn ':SlideshowFX-html:assemble'
installMarkupPlugins.dependsOn ':SlideshowFX-markdown:assemble'
installMarkupPlugins.dependsOn ':SlideshowFX-textile:assemble'
installMarkupPlugins.dependsOn ':SlideshowFX-asciidoctor:assemble'