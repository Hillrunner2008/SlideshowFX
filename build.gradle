import com.sun.javafx.PlatformUtil

/*
 * Copyright 2015 Thierry Wasylczenko
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.2'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.10.1'
    }
}

ext {
    applicationName = 'SlideshowFX'
    applicationVersion = '1.0.0'

    allLibs = new File(rootDir, '/lib')
    jdk = System.env.'JAVA_HOME'

    pluginsFolder = new File(System.getProperty("user.home"), '.SlideshowFX/plugins')
    felixCacheFolder = new File(System.getProperty("user.home"), '.SlideshowFX/felix-cache')
}

allprojects {

    repositories {
        jcenter()
        mavenCentral()
    }

    configurations {
        asciidoctorj
        drive
        dropbox
        felix
        fontawesomefx
        freemarker
        jsoup
        leapmotion
        markdown
        twitter4j
        vertx
        wikitext
        zxing

        automaton
        junit
        vertxunit
    }

    dependencies {
        asciidoctorj 'org.asciidoctor:asciidoctorj:1.5.3.2'
        drive 'com.google.apis:google-api-services-drive:v2-rev186-1.20.0'
        dropbox 'com.dropbox.core:dropbox-core-sdk:1.8.1'
        felix 'org.apache.felix:org.apache.felix.framework:5.0.1'
        fontawesomefx 'de.jensd:fontawesomefx:8.6'
        freemarker 'org.freemarker:freemarker:2.3.23'
        jsoup 'org.jsoup:jsoup:1.8.3'
        leapmotion fileTree(dir: allLibs, include: 'Leap/*')
        markdown 'com.github.rjeschke:txtmark:0.13'
        twitter4j 'org.twitter4j:twitter4j-core:4.0.4', 'org.twitter4j:twitter4j-stream:4.0.4'
        vertx 'io.vertx:vertx-core:3.1.0', 'io.vertx:vertx-web:3.1.0'
        wikitext fileTree(dir: new File(allLibs, 'WikiText'), include: '*.jar')
        zxing 'com.google.zxing:core:3.2.1', 'com.google.zxing:javase:3.2.1'

        automaton 'com.athaydes.automaton:Automaton:1.1.0'
        junit 'junit:junit:4.12'
        vertxunit 'io.vertx:vertx-unit:3.0.0'
    }

}

subprojects {
    apply plugin: 'java'
    group = "com.twasyl.slideshowfx"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    test {
        useJUnit()
        reports.html.enabled = true
    }
}

apply plugin: 'org.asciidoctor.convert'

asciidoctorj {
    version = '1.5.3'
}

asciidoctor {
    backends = ['html5','pdf']
    attributes = [
            'source-highlighter': 'coderay',
            toc: 'left',
            icons: 'font',
            setanchors: '',
            sectlinks: '',
            linkcss: false,
            'javafx-version': '8 update 51',
            'jdk-version': '8 update 51',
            'gradle-version': "${wrapper.gradleVersion}",
            'asciidoctorj-version': "${configurations.asciidoctorj.dependencies[0].version}",
            'apache-felix-version': "${configurations.felix.dependencies[0].version}",
            'freemarker-version': "${configurations.freemarker.dependencies[0].version}",
            'fontawesomefx-version' : "${configurations.fontawesomefx.dependencies[0].version}",
            'jsoup-version': "${configurations.jsoup.dependencies[0].version}",
            'leapmotion-sdk-version': '2.3.1.31549',
            'wikitext-core-version': '2.6.0.N20150709-0448',
            'wikitext-textile-core-version': '2.6.0.N20150629-1933',
            'twitter4j-version': "${configurations.twitter4j.dependencies[0].version}",
            'txtmark-version': "${configurations.markdown.dependencies[0].version}",
            'vertx-version': "${configurations.vertx.dependencies[0].version}",
            'zxing-core-version': "${configurations.zxing.dependencies[0].version}",
            'zxing-jse-version': "${configurations.zxing.dependencies[1].version}",
            'ace-version': '1.2.0'
    ]
}

task installMarkupPlugins(dependsOn: [':SlideshowFX-asciidoctor:jar',
                                      ':SlideshowFX-html:jar',
                                      ':SlideshowFX-markdown:jar',
                                      ':SlideshowFX-textile:jar']) << {

	copy {
		from project(':SlideshowFX-asciidoctor').jar.archivePath
        from project(':SlideshowFX-html').jar.archivePath
        from project(':SlideshowFX-markdown').jar.archivePath
        from project(':SlideshowFX-textile').jar.archivePath

		into pluginsFolder
	}
}

task installContentExtensionPlugins(dependsOn: [':SlideshowFX-alert-extension:jar',
                                               ':SlideshowFX-code-extension:jar',
                                               ':SlideshowFX-image-extension:jar',
                                               ':SlideshowFX-link-extension:jar',
                                               ':SlideshowFX-quote-extension:jar',
                                               ':SlideshowFX-sequence-diagram-extension:jar',
                                               ':SlideshowFX-snippet-extension:jar']) << {

    copy {
        from project(':SlideshowFX-alert-extension').jar.archivePath
        from project(':SlideshowFX-code-extension').jar.archivePath
        from project(':SlideshowFX-image-extension').jar.archivePath
        from project(':SlideshowFX-link-extension').jar.archivePath
        from project(':SlideshowFX-quote-extension').jar.archivePath
        from project(':SlideshowFX-sequence-diagram-extension').jar.archivePath
        from project(':SlideshowFX-snippet-extension').jar.archivePath

        into pluginsFolder
    }
}

task installHostingConnectorPlugins(dependsOn : [':SlideshowFX-dropbox-hosting-connector:jar',
                                         ':SlideshowFX-drive-hosting-connector:jar']) << {
    copy {
        from project(':SlideshowFX-dropbox-hosting-connector').jar.archivePath
        from project(':SlideshowFX-drive-hosting-connector').jar.archivePath

        into pluginsFolder
    }
}

task installSnippetExecutorPlugins(dependsOn : [':SlideshowFX-golo-executor:jar',
                                                ':SlideshowFX-groovy-executor:jar',
                                                ':SlideshowFX-java-executor:jar',
                                                ':SlideshowFX-javascript-executor:jar']) << {
    copy {
        from project(':SlideshowFX-golo-executor').jar.archivePath
        from project(':SlideshowFX-groovy-executor').jar.archivePath
        from project(':SlideshowFX-java-executor').jar.archivePath
        from project(':SlideshowFX-javascript-executor').jar.archivePath

        into pluginsFolder
    }
}

task installAllPlugins(dependsOn: [ ':installMarkupPlugins', ':installContentExtensionPlugins',
        ':installHostingConnectorPlugins', ':installSnippetExecutorPlugins']) << {
}

task packageSlideshowFX(dependsOn : [ 'clean',
                                      ':SlideshowFX-asciidoctor:jar', ':SlideshowFX-html:jar', ':SlideshowFX-markdown:jar', ':SlideshowFX-textile:jar',
                                      ':SlideshowFX-code-extension:jar', ':SlideshowFX-image-extension:jar', ':SlideshowFX-link-extension:jar', ':SlideshowFX-quote-extension:jar', ':SlideshowFX-sequence-diagram-extension:jar', ':SlideshowFX-snippet-extension:jar',
                                      ':SlideshowFX-golo-executor:jar', ':SlideshowFX-groovy-executor:jar', ':SlideshowFX-java-executor:jar', ':SlideshowFX-javascript-executor:jar',
                                      ':SlideshowFX-app:jar',
                                      'asciidoctor']) {

    def destinationFolder = new File(buildDir, "/distributions/$applicationName-$applicationVersion")
    def pluginsFolder = new File(destinationFolder, "plugins")
    def docFolder = new File(destinationFolder, "docs")
    def tmpFolder = new File(destinationFolder, "tmp")

    // Create the JavaFX bundle
    ant.importBuild "${projectDir.absolutePath}/src/main/resources/javafx/javafx.xml"
    ant.classpath = "${jdk}/lib/ant-javafx.jar"

    ant.deployOutDir = "${buildDir.absolutePath}/distributions/packaging"
    ant.deployResourcesDir = tmpFolder.absolutePath

    doFirst {
        copy {
            from project(':SlideshowFX-asciidoctor').jar.archivePath
            from project(':SlideshowFX-html').jar.archivePath
            from project(':SlideshowFX-markdown').jar.archivePath
            from project(':SlideshowFX-textile').jar.archivePath

            into new File(pluginsFolder, "markups")
        }

        copy {
            from project(':SlideshowFX-alert-extension').jar.archivePath
            from project(':SlideshowFX-code-extension').jar.archivePath
            from project(':SlideshowFX-image-extension').jar.archivePath
            from project(':SlideshowFX-link-extension').jar.archivePath
            from project(':SlideshowFX-quote-extension').jar.archivePath
            from project(':SlideshowFX-sequence-diagram-extension').jar.archivePath
            from project(':SlideshowFX-snippet-extension').jar.archivePath

            into new File(pluginsFolder, "extensions")
        }

        copy {
            from project(':SlideshowFX-java-executor').jar.archivePath
            from project(':SlideshowFX-javascript-executor').jar.archivePath
            from project(':SlideshowFX-golo-executor').jar.archivePath
            from project(':SlideshowFX-groovy-executor').jar.archivePath

            into new File(pluginsFolder, "executors")
        }

        copy {
            from("${asciidoctor.outputDir}/html5") {
                include '*'
            }
            into("${docFolder.absolutePath}/html")
        }

        copy {
            from("${asciidoctor.outputDir}/pdf") {
                include '*.pdf'
            }
            into("${docFolder.absolutePath}/pdf")
        }

        // Copying libs
        copy {
            from project(':SlideshowFX-app').configurations.compile
            from(fileTree(dir: allLibs, include: "Leap/", exclude: "**/LeapJava.jar"))
            from project('SlideshowFX-app').jar.archivePath

            into(tmpFolder)
        }

        if(PlatformUtil.isMac()) {
            println "Create package for the OSX platform"
            deployOSX.execute()
        } else {
            println "Create package an unknown platform"
            deployUnknown.execute()
        }

        // Clean
        copy {
            from(fileTree(dir: new File(ant.deployOutDir, "bundles")))
            into(destinationFolder)
        }
    }

    doLast {
        delete { ant.deployOutDir }
        delete { tmpFolder }
        delete {asciidoctor.outputDir }
    }
}

wrapper {
    gradleVersion = '2.8'
}