def allLibs = new File(rootDir, '/lib')
def felix = fileTree(dir: allLibs, include: 'Felix/*.jar')
def json = fileTree(dir: allLibs, include: 'json/*.jar')
def jsoup = fileTree(dir: allLibs, include: 'jsoup-1.7.3.jar')
def junit = fileTree(dir: allLibs, include: 'junit-4.11.jar')
def leapmotion = fileTree(dir: allLibs, include: 'Leap/*')
def markdown = fileTree(dir: allLibs, include: 'markdown/*.jar')
def scribe = fileTree(dir: allLibs, include: 'Scribe/*.jar')
def textile = fileTree(dir: allLibs, include: 'WikiText/*.jar')
def velocity = fileTree(dir: allLibs, include: 'Velocity/*.jar')
def vertx = fileTree(dir: allLibs, include: 'Vert.x/*.jar')		
def zxing = fileTree(dir: allLibs, include: 'ZXing/*.jar')

subprojects {
	apply plugin: 'java'
	sourceCompatibility = 1.8
	targetCompatibility= 1.8
}

project(':SlideshowFX-html') {
	dependencies {
		compile project(':SlideshowFX-markup')
		compile felix
	}

	jar {
		manifest {
			attributes('Manifest-Version': '1.0',
					   'Bundle-Name': 'SlideshowFX HTML support',
					   'Bundle-Description':'Support HTML for defining slide\'s content',
					   'Bundle-Version': '1.0.0',
					   'Bundle-Activator': 'com.twasyl.slideshowfx.markup.html.activator.HtmlActivator',
					   'Bundle-Vendor': 'Thierry Wasylczenko',
					   'Export-Package': 'com.twasyl.slideshowfx.markup',
					   'Import-Package': 'org.osgi.framework')
		}
	}
}

project(':SlideshowFX-markdown') {
	
	dependencies {
		compile project(':SlideshowFX-markup')
		compile felix
		compile markdown
	}

	jar {
		from( markdown.files ) {
      		include '*'
   		}

		manifest {
			attributes('Manifest-Version': '1.0',
					   'Bundle-Name': 'SlideshowFX markdown support',
					   'Bundle-Description': 'Support markdown for defining slide\'s content',
					   'Bundle-Version': '1.0.0',
					   'Bundle-Activator': 'com.twasyl.slideshowfx.markup.markdown.activator.MarkdownActivator',
					   'Bundle-ClassPath': 'txtmark-0.11.jar,.',
					   'Bundle-Vendor': 'Thierry Wasylczenko',
					   'Export-Package': 'com.twasyl.slideshowfx.markup',
					   'Import-Package': 'org.osgi.framework')
		}
	}	
}

project(':SlideshowFX-textile') {
	
	dependencies {
		compile project(':SlideshowFX-markup')
		compile felix
		compile textile
	}	

	jar {
		from( textile.files ) {
      		include '*'
   		}

		manifest {
			attributes('Manifest-Version': '1.0',
					   'Bundle-Name': 'SlideshowFX Textile support',
					   'Bundle-Description': 'Support Textile for defining slide\'s content',
					   'Bundle-Version': '1.0.0',
					   'Bundle-Activator': 'com.twasyl.slideshowfx.markup.textile.activator.TextileActivator',
					   'Bundle-ClassPath': 'org.eclipse.mylyn.wikitext.core_2.0.0.20140108-1934.jar,org.eclipse.mylyn.wikitext.textile.core_2.0.0.20131212-0025.jar,.',
					   'Bundle-Vendor': 'Thierry Wasylczenko',
					   'Export-Package': 'com.twasyl.slideshowfx.markup',
					   'Import-Package': 'org.osgi.framework')
		}
	}
}

project(':SlideshowFX-app') {

	task buildVersionNumber << {
	    ext.gitCommitIdCmd = "git rev-parse --short HEAD"
	    ext.gitCommitId = ext.gitCommitIdCmd.execute().text.trim()

	    ext.isRepoDirtyCmd = "git status 2"
	    ext.isRepoDirty = !ext.isRepoDirtyCmd.execute().text.trim().contains("nothing to commit, working directory clean");

	    ext.appVersion = ext.gitCommitId + (ext.isRepoDirty ? "-unofficial" : "");

	    ext.metaInfFolder = new File(project.buildDir, 'classes/main/META-INF')

		if(!ext.metaInfFolder.exists()) ext.metaInfFolder.mkdirs();

	    ext.versionFile = new File(ext.metaInfFolder, 'build.info')
		ext.versionFile.text = 'revision=' + ext.appVersion
	}

    task jar(overwrite: true) << {

        ext.libsDir = new File(buildDir, "libs")
        ext.jdk = System.env.'JAVA_HOME'

        if (ext.jdk != null && !ext.jdk.isEmpty()) {

        	if(!ext.libsDir.exists()) ext.libsDir.mkdirs()

        	ext.classpath = ""
        	
        	fileTree(dir: ext.libsDir, include: '*.jar', exclude: archivesBaseName + ".jar").each {
        		f ->
        		ext.classpath += f.name + ","
        	}

        	ext.classpath += "."

            ext.javafxpackagerCmd = "${ext.jdk}/bin/javafxpackager -createjar -appclass com.twasyl.slideshowfx.app.SlideshowFX -classpath ${ext.classpath} -outdir \"${ext.libsDir.absolutePath}\" -outfile ${project.archivesBaseName} -srcfiles \"${project.buildDir.absolutePath}/classes/main/com\";\"${project.buildDir.absolutePath}/classes/main/META-INF\";\"${project.buildDir.absolutePath}/resources/main/com\"".execute()
            ext.javafxpackagerCmd.in.eachLine {line -> println line}
            ext.javafxpackagerCmd.err.eachLine {line -> println line}
            ext.javafxpackagerCmd.waitFor()

            // Copying libs
            copy {
            	from(new File(project(':SlideshowFX-markup').libsDir, project(':SlideshowFX-markup').archivesBaseName + ".jar"))
				from(felix.files)
				from(json.files)
				from(jsoup.files)
				from(leapmotion.files)
				from(scribe.files)
				from(velocity.files)
				from(vertx.files)
				from(zxing.files)

            	into(ext.libsDir)
            }
        }
    }
    tasks['jar'].dependsOn 'classes'
	tasks['jar'].dependsOn ':SlideshowFX-markup:jar'

   task buildJavaFXBundle(dependsOn: ':SlideshowFX-app:jar') << {
        ext.distDir = new File(buildDir, "dist")
        ext.libsDir = new File(buildDir, "libs")

        ext.jdk = System.env.'JAVA_HOME'

        if (ext.jdk != null && !ext.jdk.isEmpty()) {
            println "Using JDK '${ext.jdk}'"
            println "Output dir: '${ext.distDir.absolutePath}'"
            println "Source dir: '${ext.libsDir.absolutePath}'"

            ext.javafxpackagerCmd = "${ext.jdk}/bin/javafxpackager -deploy -v -native -name SlideshowFX -outdir \"${ext.distDir.absolutePath}\" -outfile SlideshowFX -srcdir \"${ext.libsDir.absolutePath}\" -appclass com.twasyl.slideshowfx.app.SlideshowFX".execute()
            ext.javafxpackagerCmd.in.eachLine {line -> println line}
            ext.javafxpackagerCmd.err.eachLine {line -> println line}
            ext.javafxpackagerCmd.waitFor()
        }
    }

	dependencies {
		compile project(':SlideshowFX-markup')
		compile felix
		compile json
		compile jsoup
		compile leapmotion
		compile scribe
		compile velocity
		compile vertx
		compile zxing

		testCompile  junit
	}

	tasks['compileJava'].dependsOn 'buildVersionNumber'
	
}

task installMarkupPlugins << {
	
	ext.pluginsFoder = new File(projectDir, 'plugins')
	if(!ext.pluginsFoder.exists()) ext.pluginsFoder.mkdir()

	copy {
		from(new File(project(':SlideshowFX-html').libsDir, project(':SlideshowFX-html').archivesBaseName + ".jar"))
		from(new File(project(':SlideshowFX-markdown').libsDir, project(':SlideshowFX-markdown').archivesBaseName + ".jar"))
		from(new File(project(':SlideshowFX-textile').libsDir, project(':SlideshowFX-textile').archivesBaseName + ".jar"))

		into(ext.pluginsFoder)
	}
}

installMarkupPlugins.dependsOn 'SlideshowFX-html:jar'
installMarkupPlugins.dependsOn 'SlideshowFX-markdown:jar'
installMarkupPlugins.dependsOn 'SlideshowFX-textile:jar'