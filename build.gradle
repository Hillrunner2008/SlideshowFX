ext {
	allLibs = new File(rootDir, '/lib')
	felix = fileTree(dir: allLibs, include: 'Felix/*.jar')
	json = fileTree(dir: allLibs, include: 'json/*.jar')
	jsoup = fileTree(dir: allLibs, include: 'jsoup-1.7.3.jar')
	junit = fileTree(dir: allLibs, include: 'junit-4.11.jar')
	leapmotion = fileTree(dir: allLibs, include: 'Leap/*')
	markdown = fileTree(dir: allLibs, include: 'markdown/*.jar')
	scribe = fileTree(dir: allLibs, include: 'Scribe/*.jar')
	textile = fileTree(dir: allLibs, include: 'WikiText/*.jar')
	velocity = fileTree(dir: allLibs, include: 'Velocity/*.jar')
	vertx = fileTree(dir: allLibs, include: 'Vert.x/*.jar')		
	zxing = fileTree(dir: allLibs, include: 'ZXing/*.jar')

	jdk = System.env.'JAVA_HOME'
}

def getBuildNumber() {
	ext.gitCommitIdCmd = "git --work-tree=\"${rootDir.absolutePath}\" --git-dir=\"${rootDir.absolutePath}${File.separator}.git\" rev-parse --short HEAD"
    ext.gitCommitId = ext.gitCommitIdCmd.execute().text.trim()

    ext.isRepoDirtyCmd = "git --work-tree=\"${rootDir.absolutePath}\" --git-dir=\"${rootDir.absolutePath}${File.separator}.git\" status 2"
    ext.isRepoDirty = !ext.isRepoDirtyCmd.execute().text.trim().contains("nothing to commit, working directory clean");

    ext.appVersion = "${ext.gitCommitId}${ext.isRepoDirty ? '-unofficial' : ''}";

    return ext.appVersion
}

subprojects {
	apply plugin: 'java'
	sourceCompatibility = 1.8
	targetCompatibility= 1.8
}

project(':SlideshowFX-html') {
	dependencies {
		compile project(':SlideshowFX-markup')
		compile felix
	}

	jar {
		manifest {
			attributes('Manifest-Version': '1.0',
					   'Bundle-Name': 'SlideshowFX HTML support',
					   'Bundle-Description':'Support HTML for defining slide\'s content',
					   'Bundle-Version': '1.0.0',
					   'Bundle-Activator': 'com.twasyl.slideshowfx.markup.html.activator.HtmlActivator',
					   'Bundle-Vendor': 'Thierry Wasylczenko',
					   'Export-Package': 'com.twasyl.slideshowfx.markup',
					   'Import-Package': 'org.osgi.framework')
		}
	}
}

project(':SlideshowFX-markdown') {
	
	dependencies {
		compile project(':SlideshowFX-markup')
		compile felix
		compile markdown
	}

	jar {
		from( markdown.files ) {
      		include '*'
   		}

		manifest {
			attributes('Manifest-Version': '1.0',
					   'Bundle-Name': 'SlideshowFX markdown support',
					   'Bundle-Description': 'Support markdown for defining slide\'s content',
					   'Bundle-Version': '1.0.0',
					   'Bundle-Activator': 'com.twasyl.slideshowfx.markup.markdown.activator.MarkdownActivator',
					   'Bundle-ClassPath': 'txtmark-0.11.jar,.',
					   'Bundle-Vendor': 'Thierry Wasylczenko',
					   'Export-Package': 'com.twasyl.slideshowfx.markup',
					   'Import-Package': 'org.osgi.framework')
		}
	}	
}

project(':SlideshowFX-textile') {
	
	dependencies {
		compile project(':SlideshowFX-markup')
		compile felix
		compile textile
	}	

	jar {
		from( textile.files ) {
      		include '*'
   		}

		manifest {
			attributes('Manifest-Version': '1.0',
					   'Bundle-Name': 'SlideshowFX Textile support',
					   'Bundle-Description': 'Support Textile for defining slide\'s content',
					   'Bundle-Version': '1.0.0',
					   'Bundle-Activator': 'com.twasyl.slideshowfx.markup.textile.activator.TextileActivator',
					   'Bundle-ClassPath': 'org.eclipse.mylyn.wikitext.core_2.0.0.20140108-1934.jar,org.eclipse.mylyn.wikitext.textile.core_2.0.0.20131212-0025.jar,.',
					   'Bundle-Vendor': 'Thierry Wasylczenko',
					   'Export-Package': 'com.twasyl.slideshowfx.markup',
					   'Import-Package': 'org.osgi.framework')
		}
	}
}

project(':SlideshowFX-app') {

	task jar(overwrite: true) << {

        if (jdk != null && !jdk.isEmpty()) {

        	if(!libsDir.exists()) libsDir.mkdirs()

        	// Copying libs
            copy {
            	from(new File(project(':SlideshowFX-markup').libsDir, project(':SlideshowFX-markup').archivesBaseName + ".jar"))
				from(felix.files)
				from(json.files)
				from(jsoup.files)
				from(leapmotion.files)
				from(scribe.files)
				from(velocity.files)
				from(vertx.files)
				from(zxing.files)

            	into(libsDir)
            }

        	def classpath = ""
        	
        	fileTree(dir: libsDir, include: '*.jar', exclude: archivesBaseName + ".jar").each {
        		f ->
        		classpath += f.name + ","
        	}

        	classpath += "."

			def manifestAttrs = "Implementation-Version=${getBuildNumber()}"

			def javafxpackager = exec {
				workingDir "${project.projectDir.absolutePath}"

				commandLine "${jdk}/bin/javafxpackager",
							"-createjar", "-v",
							"-appclass", "com.twasyl.slideshowfx.app.SlideshowFX",
							"-classpath", "${classpath}",
							"-manifestAttrs", "${manifestAttrs}",
							"-outdir", "${buildDir}${File.separator}${libsDir.name}",
							"-outfile", "${project.archivesBaseName}",
							"-srcdir", "${buildDir.name}/classes/main", "-srcfiles", "com",
							"-srcdir", "${buildDir.name}/resources/main", "-srcfiles", "com"
			}
        }
    }

    task buildJavaFXBundle << {

        if (jdk != null && !jdk.isEmpty()) {

            def javafxpackager = exec {
				workingDir "${project.projectDir.absolutePath}"

				commandLine "${jdk}/bin/javafxpackager",
							"-deploy", 
							"-native",
							"-name", "SlideshowFX",
							"-outdir", "${buildDir.name}${File.separator}dist",
							"-outfile", "SlideshowFX",
							"-srcdir", "${buildDir.name}${File.separator}${libsDir.name}",
							"-appclass", "com.twasyl.slideshowfx.app.SlideshowFX"
			}
        }
    }

	dependencies {
		compile project(':SlideshowFX-markup')
		compile felix
		compile json
		compile jsoup
		compile leapmotion
		compile scribe
		compile velocity
		compile vertx
		compile zxing

		testCompile  junit
	}	

	tasks['jar'].dependsOn 'classes'
	tasks['jar'].dependsOn ':SlideshowFX-markup:jar'
	tasks['buildJavaFXBundle'].dependsOn 'jar'
	tasks['assemble'].dependsOn 'buildJavaFXBundle'
}

task installMarkupPlugins << {
	
	def pluginsFoder = new File(projectDir, 'plugins')
	if(!pluginsFoder.exists()) pluginsFoder.mkdir()

	copy {
		from(new File(project(':SlideshowFX-html').libsDir, project(':SlideshowFX-html').archivesBaseName + ".jar"))
		from(new File(project(':SlideshowFX-markdown').libsDir, project(':SlideshowFX-markdown').archivesBaseName + ".jar"))
		from(new File(project(':SlideshowFX-textile').libsDir, project(':SlideshowFX-textile').archivesBaseName + ".jar"))

		into (pluginsFoder)
	}
}

installMarkupPlugins.dependsOn 'SlideshowFX-html:jar'
installMarkupPlugins.dependsOn 'SlideshowFX-markdown:jar'
installMarkupPlugins.dependsOn 'SlideshowFX-textile:jar'